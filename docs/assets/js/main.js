'use-strict'
const Timidity = require('timidity')
let player
let currentlyPlaying = null
let midiFiles = []
const pathPrefix = '/midi-archive/'

class MidiPlayer {
  constructor () {
    this.player = new Timidity(pathPrefix + 'assets/timidity')
    this.player.on('playing', () => {
      console.log('currently playing', currentlyPlaying)
      console.log(player) // => 351.521
      this.duration = player.duration
      console.log('player.duration', player.duration);
    })
    this.playButton = document.querySelector('.play-button')
    this.playButton?.addEventListener('click', this.play.bind(this))
    this.pauseButton = document.querySelector('.stop-button')
    this.pauseButton?.addEventListener('click', this.pause.bind(this))
    this.randomButton = document.querySelector('.random-button')
    this.randomButton?.addEventListener('click', this.playRandom.bind(this))
    this.statusEl = document.querySelector('.status')
    this.setStatus('Click <em>Play</em> to listen to MIDI generated by the neural net model, or click into any .mid file in the archive!')
    this.duration = null
    // this.title = null;
    // default player to model prediction
    this.url = 'https://midi-archive.s3.us-east-2.amazonaws.com/neural-net/model-prediction.mid'
    this.load(this.url)
  }

  getRandomSongUrl () {
    const index = Math.round(Math.random() * midiFiles.length)
    const fileSurfaceEl = midiFiles[index]
    const fileEl = fileSurfaceEl.parentNode.querySelector('a')

    fileEl.scrollIntoView({ behavior: 'smooth' }) // should move this elsewhere
    fileSurfaceEl.parentNode.classList.toggle('playing')
    // const container = document.querySelector('.container')
    // container?.scrollBy({ behavior: 'smooth', top: 60 })

    return fileEl.getAttribute('href')
  }

  playRandom () {
    const url = this.getRandomSongUrl()

    this.playFromArchive(url)
  }

  playFromArchive (url) {
    this.url = url
    this.load(url)
    this.play()
  }

  load (url) {
    this.player.load(url)
  }

  play () {
    this.player.play()
    this.playButton.classList.toggle('hidden', true)
    this.pauseButton.classList.toggle('hidden', false)
    const filename = this.url.split('/').pop()
    this.setStatus(`now playing  <strong>${filename}</strong>`)
  }

  pause () {
    this.player.pause()
    this.pauseButton.classList.toggle('hidden')
    this.playButton.classList.toggle('hidden')
    const filename = this.url.split('/').pop()
    this.setStatus(`paused <strong>${filename}</strong>`)
  }

  setStatus (text) {
    this.statusEl.innerHTML = text
  }
}

// add hover functionality to midi files
window.onload = function () {
  midiFiles = document.querySelectorAll('.midi-archive-collection-item-surface')
  player = new MidiPlayer()
  midiFiles.forEach(function (midiFile) {
    midiFile.addEventListener('click', handleClick)
    midiFile.addEventListener('touchend', handleClick)
  })
}

function handleClick (event) {
  const { target } = event // .midi-archive-collection-item-surface
  const collectionItem = target.parentNode
  const a = collectionItem.querySelector('a')

  if (!a) {
    console.error('MIDI element not found:', a)
  }
  const href = a.getAttribute('href')

  if (href === currentlyPlaying?.getAttribute('href')) return

  player.playFromArchive(href)
  // player.load(href)
  // player.play()

  // add class to visually signify that the file is playing
  if (currentlyPlaying) {
    currentlyPlaying.classList.toggle('playing') // turn off previous
  }
  collectionItem.classList.toggle('playing') // turn on current
  currentlyPlaying = collectionItem

  // const filename = href.split('/').pop()
  // player.setStatus(`now playing  <strong>${filename}</strong>`)
}
